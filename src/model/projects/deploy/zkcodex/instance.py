import asyncio
import random
import hashlib
import time
import os

from eth_account import Account
from src.model.onchain.web3_custom import Web3Custom
from loguru import logger
import primp
from web3 import Web3
from src.utils.decorators import retry_async
from src.utils.config import Config
from src.utils.constants import EXPLORER_URL_MEGAETH

CHAIN_ID = 6342  # From constants.py comment


class ZkCodex:
    def __init__(
        self,
        account_index: int,
        session: primp.AsyncClient,
        web3: Web3Custom,
        config: Config,
        wallet: Account,
        private_key: str,
    ):
        self.account_index = account_index
        self.session = session
        self.web3 = web3
        self.config = config
        self.wallet = wallet
        self.private_key = private_key

    @retry_async(default_value=False)
    async def deploy_default_contract(self):
        try:
            logger.info(f"[{self.account_index}] Deploying default contract")

            # Contract bytecode (the input data from the example transaction)
            bytecode = "0x60c0604052601960809081527f48656c6c6f20576f726c642077697468207a6b436f646578210000000000000060a05260009061003c90826100ee565b5034801561004957600080fd5b506101ac565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061007957607f821691505b60208210810361009957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100e957806000526020600020601f840160051c810160208510156100c65750805b601f840160051c820191505b818110156100e657600081556001016100d2565b50505b505050565b81516001600160401b038111156101075761010761004f565b61011b816101158454610065565b8461009f565b6020601f82116001811461014f57600083156101375750848201515b600019600385901b1c1916600184901b1784556100e6565b600084815260208120601f198516915b8281101561017f578785015182556020948501946001909201910161015f565b508482101561019d5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b61019a806101bb6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e21f37ce14610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b602081526000825180602084015260005b8181101561010a57602081860181015160408684010152016100ed565b506000604082850101526040601f19601f83011684010191505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212203d434d68b8007847cc10a8727fe15ae7f57d189b44304c553bef7118d806703a64736f6c634300081a0033000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000000000000000000000167a6b436f64657820546f6b656e204465706c6f7965720000000000000000000000000000000000000000000000000000000000000000000000000000000000075a4b434f44455800000000000000000000000000000000000000000000000000"

            # Create transaction for gas estimation
            transaction = {
                "from": self.wallet.address,
                "to": None,  # Contract creation has no 'to' address
                "value": self.web3.web3.to_wei(0, "ether"),
                "data": bytecode,
            }

            # Estimate gas
            try:
                gas_limit = await self.web3.estimate_gas(transaction)
                transaction["gas"] = gas_limit
            except Exception as gas_error:
                logger.error(
                    f"[{self.account_index}] Gas estimation error: {gas_error}"
                )
                raise gas_error

            # Get gas price parameters
            gas_params = await self.web3.get_gas_params()
            transaction.update(gas_params)

            # Add chain ID and nonce
            transaction["chainId"] = CHAIN_ID
            transaction["nonce"] = await self.web3.web3.eth.get_transaction_count(
                self.wallet.address
            )

            # Sign transaction
            signed_txn = self.web3.web3.eth.account.sign_transaction(
                transaction, self.private_key
            )

            # Send transaction
            tx_hash = await self.web3.web3.eth.send_raw_transaction(
                signed_txn.raw_transaction
            )

            # Wait for confirmation
            receipt = await self.web3.web3.eth.wait_for_transaction_receipt(tx_hash)

            if receipt["status"] == 1:
                contract_address = receipt.contractAddress
                logger.success(
                    f"[{self.account_index}] Successfully deployed contract at {contract_address}. TX: {EXPLORER_URL_MEGAETH}{tx_hash.hex()}"
                )
                return True, contract_address
            else:
                logger.error(
                    f"[{self.account_index}] Contract deployment failed. TX: {EXPLORER_URL_MEGAETH}{tx_hash.hex()}"
                )
                return False, None

        except Exception as e:
            random_pause = random.randint(
                self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[0],
                self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[1],
            )
            logger.error(
                f"[{self.account_index}] Error deploying contract: {e}. Pause {random_pause} seconds"
            )
            await asyncio.sleep(random_pause)
            raise

    async def deploy_token(
        self,
        token_name="zkCodex Token Deployer",
        token_symbol="ZKCODEX",
        total_supply=1000000,
    ):
        for retry in range(self.config.SETTINGS.ATTEMPTS):
            try:
                logger.info(
                    f"[{self.account_index}] Deploying token contract: {token_name} ({token_symbol})"
                )

                # Token contract bytecode
                bytecode = "0x608060405234801561001057600080fd5b50604051610e3a380380610e3a83398101604081905261002f9161039d565b338383600361003e8382610498565b50600461004b8282610498565b5050506001600160a01b03811661007d57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61008681610124565b50600081116100d75760405162461bcd60e51b815260206004820152601d60248201527f537570706c79206d7573742062652067726561746572207468616e20300000006044820152606401610074565b6100e13382610176565b7f35d0b9713cc4b54bb91a9bfa420b091d37c592d49a7468dafe20b4cfbdfca02a83838360405161011493929190610582565b60405180910390a15050506105df565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166101a05760405163ec442f0560e01b815260006004820152602401610074565b6101ac600083836101b0565b5050565b6001600160a01b0383166101db5780600260008282546101d091906105b8565b9091555061024d9050565b6001600160a01b0383166000908152602081905260409020548181101561022e5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610074565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661026957600280548290039055610288565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516102cd91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561030b5781810151838201526020016102f3565b50506000910152565b600082601f83011261032557600080fd5b81516001600160401b0381111561033e5761033e6102da565b604051601f8201601f19908116603f011681016001600160401b038111828210171561036c5761036c6102da565b60405281815283820160200185101561038457600080fd5b6103958260208301602087016102f0565b949350505050565b6000806000606084860312156103b257600080fd5b83516001600160401b038111156103c857600080fd5b6103d486828701610314565b602086015190945090506001600160401b038111156103f257600080fd5b6103fe86828701610314565b925050604084015190509250925092565b600181811c9082168061042357607f821691505b60208210810361044357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561049357806000526020600020601f840160051c810160208510156104705750805b601f840160051c820191505b81811015610490576000815560010161047c565b50505b505050565b81516001600160401b038111156104b1576104b16102da565b6104c5816104bf845461040f565b84610449565b6020601f8211600181146104f957600083156104e15750848201515b600019600385901b1c1916600184901b178455610490565b600084815260208120601f198516915b828110156105295787850151825560209485019460019092019101610509565b50848210156105475786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6000815180845261056e8160208601602086016102f0565b601f01601f19169290920160200192915050565b6060815260006105956060830186610556565b82810360208401526105a78186610556565b915050826040830152949350505050565b808201808211156105d957634e487b7160e01b600052601160045260246000fd5b92915050565b61084c806105ee6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101575780638da5cb5b1461016157806395d89b411461017c578063a9059cbb14610184578063dd62ed3e14610197578063f2fde38b146101d057600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd1461010c578063313ce5671461011f57806370a082311461012e575b600080fd5b6100c16101e3565b6040516100ce9190610695565b60405180910390f35b6100ea6100e53660046106ff565b610275565b60405190151581526020016100ce565b6002545b6040519081526020016100ce565b6100ea61011a366004610729565b61028f565b604051601281526020016100ce565b6100fe61013c366004610766565b6001600160a01b031660009081526020819052604090205490565b61015f6102b3565b005b6005546040516001600160a01b0390911681526020016100ce565b6100c16102c7565b6100ea6101923660046106ff565b6102d6565b6100fe6101a5366004610788565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61015f6101de366004610766565b6102e4565b6060600380546101f2906107bb565b80601f016020809104026020016040519081016040528092919081815260200182805461021e906107bb565b801561026b5780601f106102405761010080835404028352916020019161026b565b820191906000526020600020905b81548152906001019060200180831161024e57829003601f168201915b5050505050905090565b600033610283818585610327565b60019150505b92915050565b60003361029d858285610339565b6102a88585856103b8565b506001949350505050565b6102bb610417565b6102c56000610444565b565b6060600480546101f2906107bb565b6000336102838185856103b8565b6102ec610417565b6001600160a01b03811661031b57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61032481610444565b50565b6103348383836001610496565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198110156103b257818110156103a357604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610312565b6103b284848484036000610496565b50505050565b6001600160a01b0383166103e257604051634b637e8f60e11b815260006004820152602401610312565b6001600160a01b03821661040c5760405163ec442f0560e01b815260006004820152602401610312565b61033483838361056b565b6005546001600160a01b031633146102c55760405163118cdaa760e01b8152336004820152602401610312565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166104c05760405163e602df0560e01b815260006004820152602401610312565b6001600160a01b0383166104ea57604051634a1406b160e11b815260006004820152602401610312565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156103b257826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161055d91815260200190565b60405180910390a350505050565b6001600160a01b03831661059657806002600082825461058b91906107f5565b909155506106089050565b6001600160a01b038316600090815260208190526040902054818110156105e95760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610312565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661062457600280548290039055610643565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161068891815260200190565b60405180910390a3505050565b602081526000825180602084015260005b818110156106c357602081860181015160408684010152016106a6565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146106fa57600080fd5b919050565b6000806040838503121561071257600080fd5b61071b836106e3565b946020939093013593505050565b60008060006060848603121561073e57600080fd5b610747846106e3565b9250610755602085016106e3565b929592945050506040919091013590565b60006020828403121561077857600080fd5b610781826106e3565b9392505050565b6000806040838503121561079b57600080fd5b6107a4836106e3565b91506107b2602084016106e3565b90509250929050565b600181811c908216806107cf57607f821691505b6020821081036107ef57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028957634e487b7160e01b600052601160045260246000fdfea2646970667358221220ee335cbce573d82792da8ecb1c69d6f7f081b5452ec45ac57f7527f8d1f500e764736f6c634300081a0033000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000000000000000000000167a6b436f64657820546f6b656e204465706c6f7965720000000000000000000000000000000000000000000000000000000000000000000000000000000000075a4b434f44455800000000000000000000000000000000000000000000000000"

                value_in_wei = self.web3.web3.to_wei(0, "ether")

                # Create transaction for gas estimation
                transaction = {
                    "from": self.wallet.address,
                    "to": None,  # Contract creation has no 'to' address
                    "value": value_in_wei,
                    "data": bytecode,
                }

                # Estimate gas
                try:
                    gas_limit = await self.web3.estimate_gas(transaction)
                    transaction["gas"] = gas_limit
                except Exception as gas_error:
                    logger.error(
                        f"[{self.account_index}] Gas estimation error: {gas_error}"
                    )
                    raise gas_error

                # Get gas price parameters
                gas_params = await self.web3.get_gas_params()
                transaction.update(gas_params)

                # Add chain ID and nonce
                transaction["chainId"] = CHAIN_ID
                transaction["nonce"] = await self.web3.web3.eth.get_transaction_count(
                    self.wallet.address
                )

                # Sign transaction
                signed_txn = self.web3.web3.eth.account.sign_transaction(
                    transaction, self.private_key
                )

                # Send transaction
                tx_hash = await self.web3.web3.eth.send_raw_transaction(
                    signed_txn.raw_transaction
                )

                # Wait for confirmation
                receipt = await self.web3.web3.eth.wait_for_transaction_receipt(tx_hash)

                if receipt["status"] == 1:
                    contract_address = receipt.contractAddress
                    logger.success(
                        f"[{self.account_index}] Successfully deployed token contract {contract_address}. TX: {EXPLORER_URL_MEGAETH}{tx_hash.hex()}"
                    )
                    return True, contract_address
                else:
                    logger.error(
                        f"[{self.account_index}] Token contract deployment failed. TX: {EXPLORER_URL_MEGAETH}{tx_hash.hex()}"
                    )
                    return False, None

            except Exception as e:
                random_pause = random.randint(
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[0],
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[1],
                )
                logger.error(
                    f"[{self.account_index}] Error deploying token contract: {e}. Pause {random_pause} seconds"
                )
                await asyncio.sleep(random_pause)

        return False, None

    async def deploy_nft(self):
        for retry in range(self.config.SETTINGS.ATTEMPTS):
            try:
                logger.info(f"[{self.account_index}] Deploying NFT contract")

                # NFT contract bytecode
                bytecode = ""

                value_in_wei = self.web3.web3.to_wei(0, "ether")

                # Create transaction for gas estimation
                transaction = {
                    "from": self.wallet.address,
                    "to": None,  # Contract creation has no 'to' address
                    "value": value_in_wei,
                    "data": bytecode,
                }

                # Estimate gas
                try:
                    gas_limit = await self.web3.estimate_gas(transaction)
                    transaction["gas"] = gas_limit
                except Exception as gas_error:
                    logger.error(
                        f"[{self.account_index}] Gas estimation error: {gas_error}"
                    )
                    raise gas_error

                # Get gas price parameters
                gas_params = await self.web3.get_gas_params()
                transaction.update(gas_params)

                # Add chain ID and nonce
                transaction["chainId"] = CHAIN_ID
                transaction["nonce"] = await self.web3.web3.eth.get_transaction_count(
                    self.wallet.address
                )

                # Sign transaction
                signed_txn = self.web3.web3.eth.account.sign_transaction(
                    transaction, self.private_key
                )

                # Send transaction
                tx_hash = await self.web3.web3.eth.send_raw_transaction(
                    signed_txn.raw_transaction
                )

                # Wait for confirmation
                receipt = await self.web3.web3.eth.wait_for_transaction_receipt(tx_hash)

                if receipt["status"] == 1:
                    contract_address = receipt.contractAddress
                    logger.success(
                        f"[{self.account_index}] Successfully deployed NFT contract {contract_address}. TX: {EXPLORER_URL_MEGAETH}{tx_hash.hex()}"
                    )
                    return True, contract_address
                else:
                    logger.error(
                        f"[{self.account_index}] NFT contract deployment failed. TX: {EXPLORER_URL_MEGAETH}{tx_hash.hex()}"
                    )
                    return False, None

            except Exception as e:
                random_pause = random.randint(
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[0],
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[1],
                )
                logger.error(
                    f"[{self.account_index}] Error deploying NFT contract: {e}. Pause {random_pause} seconds"
                )
                await asyncio.sleep(random_pause)

        return False, None

    async def deploy(self):
        try:
            # Collect all enabled actions
            enabled_actions = []

            if self.config.DEPLOY.ZKCODEX.DEPLOY_TOKEN:
                enabled_actions.append(self.deploy_token)

            if self.config.DEPLOY.ZKCODEX.DEPLOY_NFT:
                enabled_actions.append(self.deploy_nft)

            if self.config.DEPLOY.ZKCODEX.DEPLOY_CONTRACT:
                enabled_actions.append(self.deploy_default_contract)

            # If no actions are enabled, return
            if not enabled_actions:
                logger.info(
                    f"[{self.account_index}] No actions enabled in config for ZkCodex"
                )
                return False

            # Shuffle to randomize order
            random.shuffle(enabled_actions)

            # Execute actions based on config
            if self.config.DEPLOY.ZKCODEX.ONE_ACTION_PER_LAUNCH:
                # Run just one random action
                action = random.choice(enabled_actions)
                logger.info(
                    f"[{self.account_index}] Running one random action: {action.__name__}"
                )
                result, _ = await action()
                return result
            else:
                # Run all enabled actions in random order
                logger.info(
                    f"[{self.account_index}] Running all enabled actions in random order"
                )
                success = True
                for action in enabled_actions:
                    logger.info(
                        f"[{self.account_index}] Running action: {action.__name__}"
                    )
                    result, _ = await action()
                    if not result:
                        success = False
                return success

        except Exception as err:
            logger.error(f"[{self.account_index}] ZkCodex deploy failed: {err}")
            return False
